# This is the "one-and-only" configuration for OpenDaVINCI.
# Its format is like:
#
# section.key=value
#
# If you have several modules of the same type, the following configuration
# scheme applies:
#
# global.key=value # <-- This configuration applies for all modules.
#
# section.key=value # <-- This configuration applies for all modules of type "section".
#
# section:ID.key=value # <-- This configuration applies for the module "ID" of type "section".


###############################################################################
###############################################################################
#
# GLOBAL CONFIGURATION
#
global.car = file://data/Models/Car1.objx
#global.scenario = file://data/Track.scnx
global.scenario = file://data/Parking-boxes-1.scnx
global.showGrid = 0

# Location of the origin of the reference frame (example: 57.70485804 N, 11.93831921 E)
global.reference.WGS84.latitude = 57.70485804
global.reference.WGS84.longitude = -11.93831921

# The following attributes define the buffer sizes for recording and
# replaying. You need to adjust these parameters depending on the
# camera resolution for example (640x480x3 --> 1000000 for memorySegment,
# 1280x720x3 --> 2800000).
# Velodyne 16 occupies 480kb per sweep for SharedPointClouds
global.buffer.memorySegmentSize = 2800000 # Size of a memory segment in bytes.
global.buffer.numberOfMemorySegments = 50 # Number of memory segments.

# The following key describes the list of modules expected to participate in this --cid session.
global.session.expectedModules = HelloWorldExample,HelloWorldExample:2


###############################################################################
###############################################################################
#
# NEXT, THE CONFIGURATION FOR OpenDaVINCI TOOLS FOLLOWS. 
#
###############################################################################
###############################################################################
#
# CONFIGURATION FOR ODSUPERCOMPONENT
#

# If the managed level is pulse_shift, all connected modules will be informed
# about the supercomponent's real time by this increment per module. Thus, the
# execution times per modules are better aligned with supercomponent and the
# data exchange is somewhat more predictable.
odsupercomponent.pulseshift.shift = 10000 # (in microseconds)

# If the managed level is pulse_time_ack, this is the timeout for waiting for
# an ACK message from a connected client.
odsupercomponent.pulsetimeack.timeout = 5000 # (in milliseconds)

# If the managed level is pulse_time_ack, the modules are triggered sequentially
# by sending pulses and waiting for acknowledgment messages. To allow the modules
# to deliver their respective containers, this yielding time is used to sleep
# before supercomponent sends the pulse messages the next module in this execution
# cycle. This value needs to be adjusted for networked simulations to ensure
# deterministic execution. 
odsupercomponent.pulsetimeack.yield = 5000 # (in microseconds)

# List of modules (without blanks) that will not get a pulse message from odsupercomponent.
odsupercomponent.pulsetimeack.exclude = odcockpit


###############################################################################
###############################################################################
#
# CONFIGURATION FOR ODPLAYER
#
odplayer.input = file://recorder.rec
odplayer.autoRewind = 0 # 0 = no rewind in the case of EOF, 1 = rewind.
odplayer.remoteControl = 0 # 0 = no remote control, 1 = allowing remote control (i.e. play, pause, rewind, step_forward)
odplayer.timeScale = 1000.0 # A time scale factor of 1.0 means real time, a factor of 0 means as fast as possible. The smaller the time scale factor is the faster runs the replay.

odplayerh264.input = file://recorder.rec
odplayerh264.autoRewind = 0 # 0 = no rewind in the case of EOF, 1 = rewind.
odplayerh264.remoteControl = 0 # 0 = no remote control, 1 = allowing remote control (i.e. play, pause, rewind, step_forward)
odplayerh264.timeScale = 1000.0 # A time scale factor of 1.0 means real time, a factor of 0 means as fast as possible. The smaller the time scale factor is the faster runs the replay.
odplayerh264.portbaseforchildprocesses = 28000 # Every spawned child processes is connecting to the parent process via TCP using the base port plus its increasing ID.


###############################################################################
###############################################################################
#
# CONFIGURATION FOR ODCOCKPIT
#
odcockpit.plugins = livefeed,player,environmentviewer # List of modules to show in odcockpit; leave blank to show all.
odcockpit.directoriesForSharedLibaries = /opt,/lib # List of directories to search for libodvd*.so files.
#odcockpit.autostartPlugins = EnvironmentViewer,SharedImageViewer,LiveFeed,Player # List of plugins to show in odcockpit at startup.
#odcockpit.directoriesForSharedLibaries = /opt,/lib # List of directories to search for libodvd*.so files.
#odcockpit.player.input = file://recorder.rec
#odcockpit.player.timeScale = 0.01
#odcockpit.player.exitAtEndOfFile = 1
odcockpit.runtimeconfiguration.key1 = 0.1
odcockpit.runtimeconfiguration.key2 = 1.2
odcockpit.runtimeconfiguration.key3 = -3.2


###############################################################################
###############################################################################
#
# CONFIGURATION FOR ODRECORDER
#
odrecorder.output = file://recorder.rec
odrecorder.remoteControl = 0 # 0 = no remote control, 1 = allowing remote control (i.e. start and stop recording)
odrecorder.dumpSharedData = 1 # 0 = do not dump shared images and shared images, 1 = otherwise

odrecorderh264.output = file://recorder.rec
odrecorderh264.remoteControl = 0 # 0 = no remote control, 1 = allowing remote control (i.e. start and stop recording)
odrecorderh264.dumpSharedData = 1 # 0 = do not dump shared images and shared images, 1 = otherwise
odrecorderh264.lossless = 1 # Set to 1 to enable h264 lossless encoding.
odrecorderh264.portbaseforchildprocesses = 29000 # Every spawned child processes is connecting to the parent process via TCP using the base port plus its increasing ID.

